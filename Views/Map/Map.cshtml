@model List<DUNWorkflow.Models.Region>

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mapa Interactivo</title>
    <style>
        .region {
            fill: rgba(0, 255, 0, 0.5);
            stroke: #000;
            cursor: pointer;
        }

        #infoBox {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>
    <div id="controls"></div>
    <div id="svgContainer"></div>

    <div id="markerModal" class="modal">
        <div class="modal-content">
            <h4>Seleccionar un tipo de marcador</h4>
            <select id="markerTypeSelect">
                <option value="Heroes">Heroes</option>
                <option value="Danger">Peligro</option>
                <option value="Custom">Personalizado</option>
                <option value="Home">Hogar</option>
            </select>
            <button id="acceptButton" onclick="acceptSelection('markerModal', 'markerTypeSelect')">Aceptar</button>
            <button id="cancelButton" onclick="closeModal('markerModal')">Cancelar</button>
        </div>
    </div>

    <div id="elementModal" class="modal">
        <div class="modal-content">
            <h4>Seleccionar un tipo de elemento</h4>
            <select id="elementTypeSelect"></select>
            <br>
            <br>
            <button id="acceptButton" onclick="acceptSelection('elementModal', 'elementTypeSelect')">Aceptar</button>
            <button id="cancelButton" onclick="closeModal('elementModal')">Cancelar</button>
        </div>
    </div>

    <script>
        const svgsvg = document.getElementById('mysvg');
        const overlay = document.getElementById('overlay');

        let clickTimeout; // Variable para almacenar el temporizador
        let clickCount = 0; // Contador de clics
        let offsetX = 0;
        let offsetY = 0;
        // Obtener los datos de regiones desde el ViewBag
        var regions = @Html.Raw(ViewBag.RegionsJson);

        // Función para mostrar la información de la región y cargar los elementos
        function showRegionInfo(regionCode, event) {
            clickCount++;

            if (clickCount === 1) { //click simple
                clickTimeout = setTimeout(function() {
                // Buscar la región por código
                var region = regions.find(function(r) {
                    return r.regionCode === regionCode;
                });

                // Si se encuentra la región
                if (region) {
                    // Mostrar los elementos de la región
                    var elementList = region.elements.map(e => e.type).join(", ");
                    //alert("Region: " + region.regionCode + "\n" + "Elementos: " + elementList);

                    // Limpiar el select antes de agregar nuevas opciones
                    var select = document.getElementById("elementTypeSelect");
                    select.innerHTML = '';  // Eliminar cualquier opción existente

                    // Rellenar el select con los elementos de la región
                    region.elements.forEach(function(element) {
                        var option = document.createElement("option");
                        option.value = element.type;
                        option.textContent = element.type;
                        select.appendChild(option);
                    });

                    // Mostrar el modal
                    document.getElementById("elementModal").style.display = "block";
                } else {
                    alert("No se encontró la región");
                }
                    clickCount = 0; // Resetear contador después de un clic simple
                }, 300); // Tiempo en milisegundos para detectar el doble clic (ajustable)
            } else if (clickCount === 2) {
                // Si hay un segundo clic, es un clic doble
                offsetX = event.offsetX;
                offsetY = event.offsetY;

                document.getElementById("markerModal").style.display = "block";
                clearTimeout(clickTimeout); // Detener el temporizador del clic simple
                clickCount = 0; // Resetear contador después de un clic doble
            }

            
        }

        // Función para aceptar la selección
        function acceptSelection(modal, select) {
           
            elementType = document.getElementById(select).value;
            //alert("Elemento seleccionado: " + elementType);

            // Aquí puedes agregar más lógica para mostrar más detalles o realizar una acción adicional.
            if (modal === 'markerModal') {
              
            switch (elementType) {
                case 'Heroes':
                    addMarker('ico_mk_h');
                    break;
                case 'Danger':
                     addMarker('ico_mk_jo');
                    break;
                case 'Custom':
                     addMarker('ico_mk_p');
                    break;
                case 'Home':
                    addMarker('ico_mk_ho');
                    break;
            }
        }

            closeModal(modal);
        }

        // Función para cerrar el modal
        function closeModal(modal) {
            document.getElementById(modal).style.display = "none";
        }

            // Función para agregar el marcador en el punto donde se hizo el clic
        function addMarker(markerImage) {

            // Crear el <g> para el marcador
            const markerGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
            markerGroup.id = 'overlay';
            markerGroup.setAttribute('draggable', 'true');

            // Crear la imagen para el marcador
            const image = document.createElementNS('http://www.w3.org/2000/svg', 'image');
            //image.id = 'heromarker';
            image.setAttribute('href', `/images/${markerImage}.png`);
            image.setAttribute('width', '100');
            image.setAttribute('height', '100');

            image.setAttribute('x', offsetX - 50); // Ajuste para centrar la imagen
            image.setAttribute('y', offsetY - 50); // Ajuste para centrar la imagen

            markerGroup.appendChild(image);

            // Añadir el marcador al SVG
            document.getElementById('arascaMap').appendChild(markerGroup);

            // Hacer que el marcador sea arrastrable
            addDragAndDrop(image);

            // Agregar el evento de doble clic a la imagen para borrar
            image.addEventListener('dblclick', function() {
                const confirmDelete = confirm("¿Estás seguro de que deseas borrar este marcador?");
                if (confirmDelete) {
                    markerGroup.remove(); // Eliminar el marcador
                }
            });
        }

        // Función para añadir drag and drop a un marcador
        function addDragAndDrop(element) {
            let isDragging = false;

            element.addEventListener('mousedown', function(event) {
                isDragging = true;
                initialX = event.clientX; // Coordenadas absolutas en el viewport
                initialY = event.clientY; // Coordenadas absolutas en el viewport
            });

            element.addEventListener('mousemove', function(event) {
                if (isDragging) {
                    // Calcular el desplazamiento desde el punto de inicio
                    const dx = event.clientX - initialX;
                    const dy = event.clientY - initialY;

                    // Actualizar las coordenadas de la imagen en el SVG
                    const newX = parseFloat(element.getAttribute('x')) + dx;
                    const newY = parseFloat(element.getAttribute('y')) + dy;

                    element.setAttribute('x', newX);
                    element.setAttribute('y', newY);

                    // Actualizar la posición inicial para el próximo movimiento
                    initialX = event.clientX;
                    initialY = event.clientY;
                }
            });

            element.addEventListener('mouseup', function(event) {
                isDragging = false;

                initialX = event.clientX;
                initialY = event.clientY;

               const svgElement = document.getElementById('arascaMap'); // Cambia 'arascaMap' por el ID de tu elemento SVG

               const region = getRegionAtMarker(svgElement, initialX, initialY);

               console.log("arrived at region ", region);
            });

            element.addEventListener('mouseleave', function() {
                isDragging = false;
            });
        }

        function getSVGCoordinates(svgElement, clientX, clientY) {
            const point = svgElement.createSVGPoint();
            point.x = clientX;
            point.y = clientY;

            // Transformar las coordenadas al sistema del SVG
            const svgCoords = point.matrixTransform(svgElement.getScreenCTM().inverse());
            return { x: svgCoords.x, y: svgCoords.y };
        }

        function getRegionAtMarker(svg, clientX, clientY) {
            const paths = svg.querySelectorAll('path'); // Obtener todas las rutas del SVG
            let regionFound = null;

            // Crear un canvas temporal para usar isPointInPath
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');

            paths.forEach(path => {
                const regionCode = path.getAttribute('id'); // Suponiendo que el id identifica la región

                // Convertir el atributo 'd' a un Path2D
                const path2D = new Path2D(path.getAttribute('d'));

                // Convertir las coordenadas globales a las coordenadas del SVG
                const { x: svgX, y: svgY } = getSVGCoordinates(svg, clientX, clientY);

                // Verificar si el punto está dentro de la ruta
                if (ctx.isPointInPath(path2D, svgX, svgY)) {
                    regionFound = regionCode;
                }
            });

            return regionFound;
        }

async function loadSVG() {
    try {
        const response = await fetch('/images/arasca_100.svg');
        const svgText = await response.text();

        const parser = new DOMParser();
        const svgDoc = parser.parseFromString(svgText, "image/svg+xml");

        const svgElement = svgDoc.querySelector('svg');
        svgElement.id = "arascaMap";
        document.getElementById('svgContainer').appendChild(svgElement);

        // Obtener todas las capas <g> con atributo inkscape:groupmode="layer"
        const layers = svgElement.querySelectorAll('g[id]');

        layers.forEach(layer => {
            const layerId = layer.getAttribute('id');

            // Excluir las capas "Map" y "Regiones"
            if (layerId === "Map" || layerId === "Regiones") {
                return;
            }

            // Crear checkbox para controlar visibilidad de la capa
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = true;
            checkbox.id = layerId;
            checkbox.addEventListener('change', function () {
                layer.style.display = this.checked ? 'inline' : 'none';
            });

            const label = document.createElement('label');
            const labelText = layer.getAttribute('inkscape:label') || layerId;
            label.textContent = labelText;
            label.htmlFor = layerId;

            // Añadir checkbox y etiqueta al contenedor
            const controls = document.getElementById('controls');
            controls.appendChild(checkbox);
            controls.appendChild(label);
            controls.appendChild(document.createElement('br'));
        });

        // Agregar etiquetas de texto para cada elemento <ellipse>
        layers.forEach(layer => {
            const elements = layer.querySelectorAll('ellipse');
            elements.forEach(element => {
                const elementId = element.getAttribute('id');
                const cx = parseFloat(element.getAttribute('cx'));
                const cy = parseFloat(element.getAttribute('cy'));
                let labelText = element.getAttribute('inkscape:label') || elementId;

                // Eliminar la primera letra y cualquier cosa después del guion '-'
                labelText = labelText.substring(1).split('-')[0];

                // Crear un grupo <g> para agrupar fondo y texto
                const textGroup = document.createElementNS("http://www.w3.org/2000/svg", "g");

               // Crear elemento de texto blanco en negrita
                const textElement = document.createElementNS("http://www.w3.org/2000/svg", "text");
                textElement.setAttribute('x', cx);
                textElement.setAttribute('y', cy);
                textElement.setAttribute('fill', 'white');
                textElement.setAttribute('font-size', '18');
                textElement.setAttribute('font-family', 'Arial, sans-serif');
                textElement.setAttribute('font-weight', 'bold'); // Texto en negrita
                textElement.textContent = labelText;

                // Agregar fondo y texto al grupo
                textGroup.appendChild(textElement);

                // Agregar el grupo al SVG
                layer.appendChild(textGroup);
            });
        });

    } catch (error) {
        console.error('Error al cargar el SVG:', error);
    }
}

loadSVG();

    </script>

</body>
</html>
